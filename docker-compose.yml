version: '2'

services:
  s3:
    image: lphoward/fake-s3

  mongo:
    image: mongo:3.2
    expose:
        - "27017"
    ports:
        - "27017:27017"
    volumes:
      - ./initial-data:/initial-data:cached
      - ./tag-manager-service/bin/load-test-data.js:/load-test-data.js:cached

  elasticsearch:
    image: elasticsearch:5.1.1
    expose:
        - "9200"
        - "9300"
    ports:
        - "9200:9200"
        - "9300:9300"
    command: ["elasticsearch", "-E", "network.host=elasticsearch", "-E", "http.host=elasticsearch"]

  nginx:
    build: ./nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/conf:/etc/nginx:cached

  ################
  ### Services ###
  ################

  user-service:
    build: ./user-service
    ports:
      - "3040:3000"
      - "3041:5858"
      - "3042:8080"
    volumes:
      - ./user-service:/code:cached
    command: npm run dev
    environment:
      SEEDTAG_API_KEY: "e947f68afb0371afe92acf3fbcc541e31f0506b878ea765de51bea322ae8b56a6fb5e9efaa5236416fa14c6e27233e7c"
      PUBLIC_SIGNING_KEY: "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAlzeoxJWykxYJFVv4RnDtfooC9K3dXPWClQ/UER+z7Evg9RzwQc1W\nzsXkYc4R1SIKE1edy6SQNzlFZAcTnz+ICAlT7TcnCaA2VUU9z7W29d/He+e3Y4nw\n7uJOH1DUfgU7K1gZn/Abndk7GnDIJjXuBfaLQCDiKqDqcFNM+3f3Ir2u9gTOZALP\nQgDwZiWKiyj0V9gZEQcxOJA14vNARboMiewE63BhiDiBoU5HK7zw/ZgeXWJ8TSRg\nbe6YRsYSdmf1DL17AVxPxW9LHEKW4w4suDHcaLDOajORBGYqJc3FodvJvZSwg2N3\ngvaMukeh7j0nTJYlnXgddPaIxn64J5LghQIDAQAB\n-----END RSA PUBLIC KEY-----"
      PRIVATE_SIGNING_KEY: "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAlzeoxJWykxYJFVv4RnDtfooC9K3dXPWClQ/UER+z7Evg9Rzw\nQc1WzsXkYc4R1SIKE1edy6SQNzlFZAcTnz+ICAlT7TcnCaA2VUU9z7W29d/He+e3\nY4nw7uJOH1DUfgU7K1gZn/Abndk7GnDIJjXuBfaLQCDiKqDqcFNM+3f3Ir2u9gTO\nZALPQgDwZiWKiyj0V9gZEQcxOJA14vNARboMiewE63BhiDiBoU5HK7zw/ZgeXWJ8\nTSRgbe6YRsYSdmf1DL17AVxPxW9LHEKW4w4suDHcaLDOajORBGYqJc3FodvJvZSw\ng2N3gvaMukeh7j0nTJYlnXgddPaIxn64J5LghQIDAQABAoIBAFudszh3YdvPa+1u\n7TrwTFNwFl5bwFQDwvvAvUEqrf2p8z9OKxoS6FcaekXvbcptdyFE4itxJpbuseXq\ni67d9PK5hAmicppYYNLEwrBHbfQFgnzFZMx/1GNG5QIAHN3FGZYnKE9IT9MQu8hH\nMFxGLFGcj71ort4Y5DDtpyRsCGUZDLBN45IFLP5oRhaKDFSWD4exev8GeQDpJkgK\nsb6w1n0KJLqShvvM8SMkNsKLnxT9jgz5o3PK5wjPIS1q+bxJH4edIi37sOtrnCak\n6E2Qh/ZpRMnyKS9MYjFGLoSESKrojBoRWqat6ygQKheep82wZRKsRNptov7YlQ8t\nJOsI6PkCgYEAxPx6esAE1EnLpPupRgf5ki9zH8t5JDYlAPOQpHDZKvLZCB35D5O3\n+8FLCju190g5AC0jwgbcr6d7CvPrSfVH8w3e+gv0dyuUysoXBG0ZuWtKYc/SVZ2e\niN/qp/5leRpV2wQzK6mSBTrrs55ykHPSpBarpUHpR7W1/e83T6uyi9MCgYEAxIUE\n+EGCiDi9BZXja5RbwOxPp3oUKAPcrFH1n5nNwCrr7kP8ncY11JJC5nKLtCm624gt\nMB+h0dbaO7WGQ29gVABpiVvbAOckMpo+xC4S8xgus6/4aKvYWIffe6M3x/nuQfS5\n6HMsC9HT0zeaUsm7BcoES0Pueq5Zi8INhdtm40cCgYAqi8m8d3rTizjT4pM2EATk\ngSEhbeY1XwhxAyprigAt2ZPsv+SKa8JiOuaFSE5OIahGFHnTr3285rSZsgNQzwyC\nP624XhqoHp6dijaceyACP10qcSOh4FBcidh5/mVWWczPaEHRHWfvf0FnY0KlVo7Z\naBgcsna7SVEMjr1olNIUhwKBgCjH8eASuCPMom0mTatlfiTq5Ry8GLK1GnYoC/Cy\n2h+myI8JTMLw/vq932QzIQqiHkSwXbA+4DXLgD4jzVjxI+xKqZv3k9r8HGbj22Ka\nrRQFUKu5OLN/9cVpbNcbZ9f35ZmKT4oNXHaXdH3AbCYB9u2cnod/8V1EEREPk/7T\nKObBAoGBAI2xZOE2SFqjS4IoTFinJkGr/WjnP13vyoQPfIqThQCawv2KAaSfD4Lv\nS/r+6dYXU6oteol1bSLMmkXN4lWBxgpqAC+Gbvv982SgEq6+WdbI1IpPnqtbC8F4\nH3s8bB3nKjE1KA8UXzavsQa9tbel3SO/wQhMVTBvml52+ieAhK0w\n-----END RSA PRIVATE KEY-----"
      SEEDTAG_TLD: ".seedtag.local" # ".seedtag.com" in production
      NODE_ENV: 'development'
      MONGO_MAIN_HOSTS: "mongo:27017"
      MONGO_MAIN_PARAMS: ""
      MONGO_JSON_OPTS: "{\"server\":{\"socketOptions\":{\"keepalive\":120}},\"replset\":{\"socketOptions\":{\"keepalive\":120}}}"
    depends_on:
      - mongo

  # Mocked user-service Edit api.md to return whatever you want
  # user-service:
  #   image: ajnasz/api-mock
  #   volumes:
  #     - ./tag-manager-service/mock/user/api.md:/usr/src/app/api.md

  email-service:
    build: ./email-service
    ports:
      - "3020:3000"
      - "3021:5858"
      - "3022:8080"
    volumes:
      - ./email-service:/code:cached
    command: npm run dev
    environment:
      NODE_ENV: 'development'
      # Mailgun credentials must be defined in your local env
      MAILGUN_DOMAIN:
      MAILGUN_API_KEY:
      MONGO_MAIN_HOSTS: "mongo:27017"
      MONGO_MAIN_PARAMS: ""

  # Mocked sherlock-service Edit api.md to return whatever you want
  # sherlock-service:
  #   image: ajnasz/api-mock
  #   volumes:
  #     - ./tag-manager-service/mock/sherlock/api.md:/usr/src/app/api.md

  sherlock-service:
    build: ./sherlock-service
    ports:
      - "3030:3000"
    volumes:
      - ./sherlock-service:/code:cached
    environment:
      NODE_ENV: 'development'
      DATASTORE_EMULATOR_HOST: 'google-cloud-emulator:8888'
      GCLOUD_PROJECT: 'testing-project'
      SEEDTAG_TLD: ".seedtag.local" # ".seedtag.com" in production
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
      ZOOKEEPER_HOSTS: 'zookeeper:2181'
    depends_on:
      - google-cloud-emulator
      - redis
      - kafka
    command: npm run dev

  redis:
    image: redis
    ports:
      - "6379:6379"

  google-cloud-emulator:
    build: ./sherlock-service/google-cloud-emulator
    container_name: google-cloud-emulator
    expose:
      - "8888"
    ports:
      - "8888:8888"
    environment:
      CLOUDSDK_CORE_PROJECT: 'testing-project'

  smartadserver:
    extends:
      file: ./adserver-proxy-service/service.yml
      service: smartadserver

  adserver-proxy-service:
    extends:
      file: ./adserver-proxy-service/service.yml
      service: adserver-proxy-service
    ports:
     - "3070:3000"
     - "3071:9229"
     - "3072:9228"
    volumes:
     - ./adserver-proxy-service:/code:cached
    depends_on:
      - smartadserver
    command: npm run start-dev

  tag-manager-service:
    build: ./tag-manager-service
    ports:
      - "3000:3000"
      - "3001:9229"
      - "3002:9228"
    volumes:
      - ./tag-manager-service:/code:cached
    environment:
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
      MONGO_MAIN_HOSTS: "mongo:27017"
      MONGO_MAIN_PARAMS: ""
      NODE_ENV: 'development'
      PUBLIC_SIGNING_KEY: "-----BEGIN RSA PUBLIC KEY-----\nMIIBCgKCAQEAlzeoxJWykxYJFVv4RnDtfooC9K3dXPWClQ/UER+z7Evg9RzwQc1W\nzsXkYc4R1SIKE1edy6SQNzlFZAcTnz+ICAlT7TcnCaA2VUU9z7W29d/He+e3Y4nw\n7uJOH1DUfgU7K1gZn/Abndk7GnDIJjXuBfaLQCDiKqDqcFNM+3f3Ir2u9gTOZALP\nQgDwZiWKiyj0V9gZEQcxOJA14vNARboMiewE63BhiDiBoU5HK7zw/ZgeXWJ8TSRg\nbe6YRsYSdmf1DL17AVxPxW9LHEKW4w4suDHcaLDOajORBGYqJc3FodvJvZSwg2N3\ngvaMukeh7j0nTJYlnXgddPaIxn64J5LghQIDAQAB\n-----END RSA PUBLIC KEY-----"
      PRIVATE_SIGNING_KEY: "-----BEGIN RSA PRIVATE KEY-----\nMIIEowIBAAKCAQEAlzeoxJWykxYJFVv4RnDtfooC9K3dXPWClQ/UER+z7Evg9Rzw\nQc1WzsXkYc4R1SIKE1edy6SQNzlFZAcTnz+ICAlT7TcnCaA2VUU9z7W29d/He+e3\nY4nw7uJOH1DUfgU7K1gZn/Abndk7GnDIJjXuBfaLQCDiKqDqcFNM+3f3Ir2u9gTO\nZALPQgDwZiWKiyj0V9gZEQcxOJA14vNARboMiewE63BhiDiBoU5HK7zw/ZgeXWJ8\nTSRgbe6YRsYSdmf1DL17AVxPxW9LHEKW4w4suDHcaLDOajORBGYqJc3FodvJvZSw\ng2N3gvaMukeh7j0nTJYlnXgddPaIxn64J5LghQIDAQABAoIBAFudszh3YdvPa+1u\n7TrwTFNwFl5bwFQDwvvAvUEqrf2p8z9OKxoS6FcaekXvbcptdyFE4itxJpbuseXq\ni67d9PK5hAmicppYYNLEwrBHbfQFgnzFZMx/1GNG5QIAHN3FGZYnKE9IT9MQu8hH\nMFxGLFGcj71ort4Y5DDtpyRsCGUZDLBN45IFLP5oRhaKDFSWD4exev8GeQDpJkgK\nsb6w1n0KJLqShvvM8SMkNsKLnxT9jgz5o3PK5wjPIS1q+bxJH4edIi37sOtrnCak\n6E2Qh/ZpRMnyKS9MYjFGLoSESKrojBoRWqat6ygQKheep82wZRKsRNptov7YlQ8t\nJOsI6PkCgYEAxPx6esAE1EnLpPupRgf5ki9zH8t5JDYlAPOQpHDZKvLZCB35D5O3\n+8FLCju190g5AC0jwgbcr6d7CvPrSfVH8w3e+gv0dyuUysoXBG0ZuWtKYc/SVZ2e\niN/qp/5leRpV2wQzK6mSBTrrs55ykHPSpBarpUHpR7W1/e83T6uyi9MCgYEAxIUE\n+EGCiDi9BZXja5RbwOxPp3oUKAPcrFH1n5nNwCrr7kP8ncY11JJC5nKLtCm624gt\nMB+h0dbaO7WGQ29gVABpiVvbAOckMpo+xC4S8xgus6/4aKvYWIffe6M3x/nuQfS5\n6HMsC9HT0zeaUsm7BcoES0Pueq5Zi8INhdtm40cCgYAqi8m8d3rTizjT4pM2EATk\ngSEhbeY1XwhxAyprigAt2ZPsv+SKa8JiOuaFSE5OIahGFHnTr3285rSZsgNQzwyC\nP624XhqoHp6dijaceyACP10qcSOh4FBcidh5/mVWWczPaEHRHWfvf0FnY0KlVo7Z\naBgcsna7SVEMjr1olNIUhwKBgCjH8eASuCPMom0mTatlfiTq5Ry8GLK1GnYoC/Cy\n2h+myI8JTMLw/vq932QzIQqiHkSwXbA+4DXLgD4jzVjxI+xKqZv3k9r8HGbj22Ka\nrRQFUKu5OLN/9cVpbNcbZ9f35ZmKT4oNXHaXdH3AbCYB9u2cnod/8V1EEREPk/7T\nKObBAoGBAI2xZOE2SFqjS4IoTFinJkGr/WjnP13vyoQPfIqThQCawv2KAaSfD4Lv\nS/r+6dYXU6oteol1bSLMmkXN4lWBxgpqAC+Gbvv982SgEq6+WdbI1IpPnqtbC8F4\nH3s8bB3nKjE1KA8UXzavsQa9tbel3SO/wQhMVTBvml52+ieAhK0w\n-----END RSA PRIVATE KEY-----"
      SEEDTAG_TLD: ".seedtag.local" # ".seedtag.com" in production
      SEEDTAG_API_KEY: "e947f68afb0371afe92acf3fbcc541e31f0506b878ea765de51bea322ae8b56a6fb5e9efaa5236416fa14c6e27233e7c"
    depends_on:
      - mongo
      - sherlock-service
      - redis
      - user-service
      - audit-service
    command: yarn start-dev

  studio-service:
    extends:
      file: ./studio/service.yml
      service: studio-service
    depends_on:
      - mongo
      - nginx
      - user-service
      - s3
    ports:
      - "3010:3000"
      - "3011:9229"
      - "3012:8080"
    volumes:
      - ./studio/server:/code:cached
      - ./studio/server/src/template/lib:/template_lib:cached
      - ./studio/creatives:/creatives:cached

  tagging-service:
    extends:
      file: ./tagging-service/service.yml
      service: tagging-service
    ports:
      - "3080:3000"
      - "3081:9229"
    volumes:
      - ./tagging-service:/code:cached
    depends_on:
      - user-service
      - campaign-service

  error-service:
    build: ./error-service
    ports:
      - "3100:3000"
    volumes:
      - ./error-service:/code:cached
    environment:
      NODE_ENV: "development"
    command: npm run dev

  zookeeper:
    image: wurstmeister/zookeeper

  kafka:
    image: wurstmeister/kafka:1.0.0
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CONTROLLED_SHUTDOWN_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "tasks:1:1,events:1:1"
      KAFKA_RESERVED_BROKER_MAX_ID: 1001
      KAFKA_BROKER_ID: 1001
    depends_on:
      - zookeeper

  event-bigdata-service:
    build: ./event-bigdata-service
    ports:
      - "3110:3000"
    volumes:
      - ./event-bigdata-service:/code:cached
    environment:
      NODE_ENV: "development"
      ZOOKEEPER_HOST: 'zookeeper:2181'
    depends_on:
      - kafka
    command: sh -c "sleep 5; npm run dev"

  analytics-service:
    command: ./entrypoint.sh 'yarn dev'
    extends:
      file: ./analytics-service/service.yml
      service: analytics-service
    ports:
      - "3130:3000"
    volumes:
      - ./analytics-service:/code:cached
    links:
      - "mongo:analytics-database"
    depends_on:
      - user-service
      - mongo
      - elasticsearch
      - tag-manager-service


  watson-service:
    build: ./watson-service
    ports:
      - "3140:3000"
    volumes:
      - ./watson-service:/code:cached
    command: npm run dev
    depends_on:
      - kafka
      - custom-categories-service
      - user-service
      - blacklist-service
    environment:
      NODE_ENV: 'development'
      ZOOKEEPER_HOSTS: 'zookeeper:2181'
      DEBUG: 'kafka-node:ConsumerGroup'
      PEER39_CLIENT_CODE: 'asdf'
      PEER39_URL: 'asdf'
      NODENAME: 'docker'
      REDIS_HOST: 'redis'
      REDIS_PORT: '6379'
      SEEDTAG_API_KEY: 'e947f68afb0371afe92acf3fbcc541e31f0506b878ea765de51bea322ae8b56a6fb5e9efaa5236416fa14c6e27233e7c'


  skynet-service:
    build: ./skynet-service
    ports:
      - "3210:3000"
    volumes:
      - ./skynet-service:/app
    environment:
      MONGO_MAIN_HOSTS: 'mongo:27017'
      MONGO_MAIN_PARAMS: ""
      MONGO_JSON_OPTS: "{\"server\":{\"socketOptions\":{\"keepalive\":120}},\"replset\":{\"socketOptions\":{\"keepalive\":120}}}"


  campaign-service:
    extends:
      file: ./campaign-service/service.yml
      service: campaign-service
    ports:
      - "3150:3000"
    volumes:
      - ./campaign-service:/code:cached
    depends_on:
      - mongo

  creative-preview-service:
    build: ./creative-preview-service
    ports:
      - "3180:3000"
    volumes:
      - ./creative-preview-service:/code:cached
    command: yarn run dev
    environment:
      NODE_ENV: 'development'

  custom-categories-service:
    extends:
      file: ./custom-categories-service/service.yml
      service: custom-categories-service
    ports:
      - "3160:3000"
      - "3161:9229"
    volumes:
      - ./custom-categories-service:/code:cached
    depends_on:
      - mongo
      - redis
      - kafka
      - zookeeper

  blacklist-service:
    ports:
      - "3170:3000"
      - "3171:9229"
    extends:
      file: ./blacklist-service/service.yml
      service: blacklist-service
    volumes:
      - ./blacklist-service:/code:cached
    depends_on:
      - mongo
      - zookeeper
      - kafka
      - redis

  geolocation-service:
    build: ./geolocation-service
    command: yarn dev
    ports:
      - 3190:3000
    volumes:
      - ./geolocation-service:/code:cached

  audit-service:
    ports:
      - 3200:3000
      - 3201:9229
    extends:
      file: ./audit-service/service.yml
      service: audit-service
    volumes:
      - ./audit-service:/code:cached
    depends_on:
      - mongo

  # Requires having a build in ./topurls-service/target/scala-2.11/topurls-service_2.11-0.1-SNAPSHOT.jar
  topurls-service:
    image: gettyimages/spark:2.0.0-hadoop-2.7
    environment:
      DEBUG_ENV: "true"
    depends_on:
      - elasticsearch
      - zookeeper
      - kafka
    volumes:
      - ./topurls-service:/topurls-service:cached
    command: "/topurls-service/deploy-local.sh"

  # Requires having a build in ./aggregation-service/target/scala-2.11/aggregation-test_2.11-0.1-SNAPSHOT.jar
  aggregation-service:
    image: gettyimages/spark
    environment:
      DEBUG_ENV: "true"
    depends_on:
      - mongo
      - zookeeper
      - kafka
    volumes:
      - ./aggregation-service:/aggregation-service:cached
    command: "/aggregation-service/deploy-local.sh"

  # Requires having a build in ./blacklisted-traffic-service/target/scala-2.11/topurls-service_2.11-0.1-SNAPSHOT.jar
  blacklisted-traffic-service:
    image: gettyimages/spark
    environment:
      DEBUG_ENV: "true"
    depends_on:
      - elasticsearch
      - zookeeper
      - kafka
    volumes:
      - ./blacklisted-traffic-service:/blacklisted-traffic-service:cached
    command: "/blacklisted-traffic-service/deploy-local.sh"

  # Requires having a build in ./adserver-report-extraction-task/job/target/scala-2.11/report-importer_2.11-1.0.jar
  adserver-report-extraction-task:
    build:
      context: ./adserver-report-extraction-task/
      dockerfile: Dockerfile-dev
    environment:
      SEEDTAG_API_KEY: e947f68afb0371afe92acf3fbcc541e31f0506b878ea765de51bea322ae8b56a6fb5e9efaa5236416fa14c6e27233e7c
      NODE_ENV: 'development'
    depends_on:
      - mongo
      - tag-manager-service
      - user-service
      - adserver-proxy-service
    volumes:
      - ./adserver-report-extraction-task:/code:cached
    # By default do nothing, just run the container to do whatever you want in a shell
    command: "tail -f /dev/null"
    # If you want to run the job:
    # command: ./deploy-local.sh <CsvFilePath>
    # If you want to pass the tests
    # command: "sbt test"

  # ssp-service:
  #   ports:
  #     - "3220:3000"
  #     - "3221:9229"
  #   extends:
  #     file: ./ssp-service/service.yml
  #     service: ssp-service
  #   volumes:
  #     - ./ssp-service:/code:cached
  #   depends_on:
  #     - mongo
  #     - dsp-mock

  # dsp-mock:
  #   build: ./dsp-mock
  #   ports:
  #     - 7000:3000
  #     - 7001:8000
  #   command: "gin -t /go/src -d . -a 8000" # Autoupdate, watching /go/src building /go/src/app
  #   depends_on:
  #     - redis
  #     - fluent
  #   volumes:
  #     - ./dsp-mock:/go/src/github.com/satoshi03/go-dsp-api/

  # fluent:
  #   image: fluent/fluentd
  #   logging:
  #     driver: none
